name: CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout kodu
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Instalacja środowiska Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Instalacja zależności
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 4. Uruchomienie testów jednostkowych
      - name: Run unit tests
        run: |
          pytest --maxfail=5 --disable-warnings

  clean-and-merge-main-py:
    needs: test
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout kodu
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Przejście na branch `main`
      - name: Checkout main branch
        run: |
          git fetch origin main
          git checkout main

      # 3. Ustawienie autora zmian
      - name: Set author identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 4. Usunięcie wszystkich plików na branchu main
      - name: Remove all files from main
        run: |
          git rm -rf . # Usuwa wszystkie pliki z branchu main
          git commit -m "Cleaned main branch" || echo "Nothing to clean"

      # 5. Skopiowanie pliku `main.py` z develop
      - name: Copy main.py from develop
        run: |
          git fetch origin develop
          git checkout develop -- main.py # Pobiera tylko plik main.py z develop
          git add main.py
          git commit -m "Automatyczny merge main.py z develop do main"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
